<pre>
  OEP: 5
  Title: dApp web API (dAPI)
  Author: Matus Zamborsky <zamborsky@gmail.com>
  Type: Meta
  Status: Draft
  Created: 2018-08-03
</pre>

==Abstract==

A Javascript API is proposed for dApps development. This dAPI allows dApps to communicate with Ontology blockchain and make requests for transfers, ONT ID registration and others, without requiring users to trust the dApp itself. The issue of trust is shifted to the dAPI provider.

==Motivation==

Currently a dApp will use one of the SDKs (Typescript, Java, Python, ...) to communicate with Ontology network. This setup has two main disadvantages:

1. User of the dApp will have to trust the dApp developer with his private keys and that information about transfers mediated through the dApp are legitimate.

2. Although the SDKs are very powerful, they are hard to use. A more streamlined API will allow developers to focus on the application itself.

==Specification==
This proposal makes use of the following functions and definitions:

*'''SDK''', a software development kit implementing low level communication with the network and providing high level interface for dApps.

*'''dApp''', an application with decentralized characteristics running in web environment. The application uses Ontology network for value transfers, contracts enforcing and identification between participants.

*'''dAPI''', the API for dApps this OEP is proposing.

*'''dAPI provider''', an implementation of the dAPI in the form of web browser plugin or other means, where a user interaction with the provider can be injected into api call workflow (e.g.: confirming transfer)

===dAPI grouping===
Although this proposal is bringing clear and simple API for the dApps, the individual functions can be divided into these groups:

* '''Network''', a thin wrapper around the Ontology Node API, masking the complexity of rpc/rest calls and websockets with Request-Response facade.

* '''Runtime''', a main point of integration with the dAPI provider, where the issue of trust is shifted from dApp to dApp provider.

* '''Smart contract''', a high level wrapper around the Smart Contract invocation and deployment.

* '''Utils''', a group of utility function for encoding and decoding the data from/to blockchain.

===Complex structures===
API specification is a complex document. Every method has some inputs and outputs. Although we use the primitive types (numbers, strings, booleans) whenever possible, there are places where a complex object is required. To preciselly describe the structure of those objects, we'd chosen Typescript syntax.

===Network===
A network API consists of:

<pre>
type Network = 'MAIN' | 'TEST' | 'PRIVATE';
type Asset = 'ont' | 'ong';

function getGenerateBlockTime(): Promise<number | null>
function getNodeCount(): Promise<number>
function getBlockHeight(): Promise<number>
function getMerkleProof(txHash: string): Promise<MerkleProof>
function getStorage(constractAddress: string, key: string): Promise<string>
function getAllowance(asset: Asset, fromAddress: string, toAddress: string): Promise<BigNumber>
function getBlock(block: number | string): Promise<Block>
function getTransaction(txHash: string): Promise<Transaction>
function getNetwork(): Network
function getBalance(address: string): Promise<Balance>
</pre>

For further explanation about the wrapped method consult https://ontio.github.io/documentation/restful_api_en.html . The types '''Transaction''', '''Block''', '''MerkleProof''' and '''Balance''' corresponds to the exact object returned from Ontology blockchain. '''BigNumber''' corresponds to a implementation of BigNumbers.

==Rationale==

==Test Cases==

==Implementation==

